//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Bold`.
    static let montserratBold = Rswift.FontResource(fontName: "Montserrat-Bold")
    /// Font `Montserrat-Light`.
    static let montserratLight = Rswift.FontResource(fontName: "Montserrat-Light")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    /// Font `Montserrat-SemiBold`.
    static let montserratSemiBold = Rswift.FontResource(fontName: "Montserrat-SemiBold")
    /// Font `Montserrat-Thin`.
    static let montserratThin = Rswift.FontResource(fontName: "Montserrat-Thin")
    /// Font `SFProText-BoldItalic`.
    static let sfProTextBoldItalic = Rswift.FontResource(fontName: "SFProText-BoldItalic")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-HeavyItalic`.
    static let sfProTextHeavyItalic = Rswift.FontResource(fontName: "SFProText-HeavyItalic")
    /// Font `SFProText-Heavy`.
    static let sfProTextHeavy = Rswift.FontResource(fontName: "SFProText-Heavy")
    /// Font `SFProText-Italic`.
    static let sfProTextItalic = Rswift.FontResource(fontName: "SFProText-Italic")
    /// Font `SFProText-LightItalic`.
    static let sfProTextLightItalic = Rswift.FontResource(fontName: "SFProText-LightItalic")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-MediumItalic`.
    static let sfProTextMediumItalic = Rswift.FontResource(fontName: "SFProText-MediumItalic")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-SemiboldItalic`.
    static let sfProTextSemiboldItalic = Rswift.FontResource(fontName: "SFProText-SemiboldItalic")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    
    /// `UIFont(name: "Montserrat-Bold", size: ...)`
    static func montserratBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBold, size: size)
    }
    
    /// `UIFont(name: "Montserrat-Light", size: ...)`
    static func montserratLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLight, size: size)
    }
    
    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }
    
    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }
    
    /// `UIFont(name: "Montserrat-SemiBold", size: ...)`
    static func montserratSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBold, size: size)
    }
    
    /// `UIFont(name: "Montserrat-Thin", size: ...)`
    static func montserratThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThin, size: size)
    }
    
    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }
    
    /// `UIFont(name: "SFProText-BoldItalic", size: ...)`
    static func sfProTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Heavy", size: ...)`
    static func sfProTextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavy, size: size)
    }
    
    /// `UIFont(name: "SFProText-HeavyItalic", size: ...)`
    static func sfProTextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Italic", size: ...)`
    static func sfProTextItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }
    
    /// `UIFont(name: "SFProText-LightItalic", size: ...)`
    static func sfProTextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLightItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFProText-MediumItalic", size: ...)`
    static func sfProTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }
    
    /// `UIFont(name: "SFProText-SemiboldItalic", size: ...)`
    static func sfProTextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemiboldItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.montserratBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Bold' could not be loaded, is 'Montserrat-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Light' could not be loaded, is 'Montserrat-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBold' could not be loaded, is 'Montserrat-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Thin' could not be loaded, is 'Montserrat-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SF-Pro-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-BoldItalic' could not be loaded, is 'SF-Pro-Text-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Heavy' could not be loaded, is 'SF-Pro-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-HeavyItalic' could not be loaded, is 'SF-Pro-Text-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Italic' could not be loaded, is 'SF-Pro-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-LightItalic' could not be loaded, is 'SF-Pro-Text-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-MediumItalic' could not be loaded, is 'SF-Pro-Text-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-SemiboldItalic' could not be loaded, is 'SF-Pro-Text-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `LaunchScreen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreen")
    /// Image `US-news-icon`.
    static let usNewsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "US-news-icon")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `canada-news-background`.
    static let canadaNewsBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "canada-news-background")
    /// Image `canada-news-icon`.
    static let canadaNewsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "canada-news-icon")
    /// Image `default-news-image`.
    static let defaultNewsImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "default-news-image")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `usa-news-background`.
    static let usaNewsBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "usa-news-background")
    
    /// `UIImage(named: "LaunchScreen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "US-news-icon", bundle: ..., traitCollection: ...)`
    static func usNewsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usNewsIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "canada-news-background", bundle: ..., traitCollection: ...)`
    static func canadaNewsBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canadaNewsBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "canada-news-icon", bundle: ..., traitCollection: ...)`
    static func canadaNewsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.canadaNewsIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default-news-image", bundle: ..., traitCollection: ...)`
    static func defaultNewsImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultNewsImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "usa-news-background", bundle: ..., traitCollection: ...)`
    static func usaNewsBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usaNewsBackground, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `News`.
    static let news = _R.storyboard.news()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "News", bundle: ...)`
    static func news(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.news)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      /// Value: CA
      static let canadaNewsTitle = Rswift.StringResource(key: "canadaNewsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Canada Headlines
      static let canadaNewsHeadlineTitle = Rswift.StringResource(key: "canadaNewsHeadlineTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Canada News Headlines
      static let homeCanadaTitleName = Rswift.StringResource(key: "homeCanadaTitleName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date Published:
      static let datePublishedTitle = Rswift.StringResource(key: "datePublishedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Today's News
      static let homeTitleName = Rswift.StringResource(key: "homeTitleName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: US
      static let usNewsTitle = Rswift.StringResource(key: "usNewsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: US Headlines
      static let usNewsHeadlineTitle = Rswift.StringResource(key: "usNewsHeadlineTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: US News Headlines
      static let homeUSTitleName = Rswift.StringResource(key: "homeUSTitleName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: CA
      static func canadaNewsTitle(_: Void = ()) -> String {
        return NSLocalizedString("canadaNewsTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Canada Headlines
      static func canadaNewsHeadlineTitle(_: Void = ()) -> String {
        return NSLocalizedString("canadaNewsHeadlineTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Canada News Headlines
      static func homeCanadaTitleName(_: Void = ()) -> String {
        return NSLocalizedString("homeCanadaTitleName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Date Published:
      static func datePublishedTitle(_: Void = ()) -> String {
        return NSLocalizedString("datePublishedTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Today's News
      static func homeTitleName(_: Void = ()) -> String {
        return NSLocalizedString("homeTitleName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: US
      static func usNewsTitle(_: Void = ()) -> String {
        return NSLocalizedString("usNewsTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: US Headlines
      static func usNewsHeadlineTitle(_: Void = ()) -> String {
        return NSLocalizedString("usNewsHeadlineTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: US News Headlines
      static func homeUSTitleName(_: Void = ()) -> String {
        return NSLocalizedString("homeUSTitleName", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try auth.validate()
      try launchScreen.validate()
      try main.validate()
      try news.validate()
    }
    
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let landingController = StoryboardViewControllerResource<LandingController>(identifier: "LandingController")
      let loginController = StoryboardViewControllerResource<LoginController>(identifier: "LoginController")
      let name = "Auth"
      let signUpController = StoryboardViewControllerResource<SignUpController>(identifier: "SignUpController")
      
      func landingController(_: Void = ()) -> LandingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingController)
      }
      
      func loginController(_: Void = ()) -> LoginController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginController)
      }
      
      func signUpController(_: Void = ()) -> SignUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "fb-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fb-icon' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "Bunting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Bunting' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "DeepSkyBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DeepSkyBlue' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Indigo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Indigo' is used in storyboard 'Auth', but couldn't be loaded.") }
        }
        if _R.storyboard.auth().landingController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingController' could not be loaded from storyboard 'Auth' as 'LandingController'.") }
        if _R.storyboard.auth().loginController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginController' could not be loaded from storyboard 'Auth' as 'LoginController'.") }
        if _R.storyboard.auth().signUpController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpController' could not be loaded from storyboard 'Auth' as 'SignUpController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct news: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "News"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
